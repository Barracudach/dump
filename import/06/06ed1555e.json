[1,["98kQvoUH5Oarn+4pq68NK4","51+uFOeTlL+JyycGHmAD/d","8dhu7TAY5CgpVSTB8ngbNB"],["node","_font","_effect","root","data"],[["cc.Node",["_name","_active","_components","_prefab","_children","_parent"],1,9,4,2,1],["cc.Label",["_string","_isSystemFontUsed","_underlineHeight","_fontSize","node","__prefab","_font"],-1,1,4,6],["5368bfafTpAILo/RqmVjHSf",["_outlineThickness","node","__prefab","_outlineColor","_effect"],2,1,4,5,6],["496bbxIhdVEabN7IpNLxVm9",["_useMiddleColor","affectNodeOpacity","_middlePos","node","__prefab","_endColor","_middleColor","_effect","_startColor","_startPos","_endPos"],0,1,4,5,5,6,5,5,5],["cc.Prefab",["_name"],2],["cc.UIOpacity",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["cc.UITransform",["node","__prefab","_contentSize"],3,1,4,5],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["c0bdajZIltJdZOx+AzYQLE+",["node","__prefab"],3,1,4],["cc.EffectAsset",["_name","combinations","shaders","techniques"],-1]],[[6,0,2],[5,0,1,1],[7,0,1,2,1],[8,0,1,2,3,4,5,5],[0,0,5,2,3,2],[1,0,3,1,2,4,5,6,5],[9,0,1,1],[0,0,5,4,2,3,2],[1,0,1,2,4,5,6,4],[2,1,2,3,4,1],[3,0,1,3,4,5,6,7,3],[4,0,2],[0,0,4,2,3,2],[0,0,1,5,4,2,3,3],[2,0,1,2,3,4,2],[3,0,2,3,4,8,5,9,10,6,7,3],[10,0,1,2,3,5]],[[[[11,"cardType"],[12,"cardType",[-4,-5,-6],[[1,-2,[0,"92XN9bMMpA9ZExpJAVPKko"]],[2,-3,[0,"c17txkSm9DipqcKOn5vu4h"],[5,111,57]]],[3,"9emmKUPjlD6Zlt4E3TU/kl",null,null,null,-1,0]],[13,"win_card_type",false,1,[-10,-11],[[6,-7,[0,"fc2HgUxqBHPaplcmRC6ZIG"]],[1,-8,[0,"ac42l4ykhEQava+WgqrNaA"]],[2,-9,[0,"f6y2MvyTdBkaxQXsm05wGZ"],[5,0,0]]],[3,"28B0MJqf5EuqgXR2YS8wG+",null,null,null,1,0]],[7,"lose_card_type",1,[-15,-16],[[6,-12,[0,"76mg4cPoxAcoDcwH95tdij"]],[1,-13,[0,"fbSxa1XmxG5YV6qVeOGTuH"]],[2,-14,[0,"56Jr8JWAtLiZ7QXWoAb823"],[5,0,0]]],[3,"2dSXGl8I5BDZvh983p0lLZ",null,null,null,1,0]],[7,"lead_card_type",1,[-20,-21],[[6,-17,[0,"4erugKXGNBI4NDACLRTvwl"]],[1,-18,[0,"2edIilqYxICJTqxBJlIR3m"]],[2,-19,[0,"daZUh5ZsNB244HKDWm6+7D"],[5,0,0]]],[3,"a8ax7s8uVPcIvEOvgX61se",null,null,null,1,0]],[4,"outline",2,[[5,"High Card",34,false,0,-22,[0,"86/4VpjmRC4rsJWPDHJDey"],0],[14,4,-23,[0,"f3Zxyjf5FIaqOnHgvr/IEW"],[4,4278480072],1],[1,-24,[0,"05NkHCrulBxZZEcA6DOGK4"]],[2,-25,[0,"d3EpPlSxtAaJSMnLP4Aile"],[5,159.28,50.4]]],[3,"f18wLITeZCuI+sgtCsx3lU",null,null,null,1,0]],[4,"gradient",2,[[5,"High Card",34,false,0,-26,[0,"9aAg6O6m5M2KlMcoDBrPBG"],2],[10,true,false,-27,[0,"5eMqTAgCJPrZQk+rUL2o/t"],[4,4294967295],[4,4285854460],3],[1,-28,[0,"0cKfxcjddHzbTl0iLJPAOx"]],[2,-29,[0,"7dEgbaG/FDg78jdEgLTxiA"],[5,159.28,50.4]]],[3,"d6n4jpg+1JrJHVS0+F7ub3",null,null,null,1,0]],[4,"outline",3,[[5,"High Card",34,false,0,-30,[0,"4126oEkAdH6bomfKSw8ufc"],4],[9,-31,[0,"0aWTxQZG1ALbPUudwOEfH5"],[4,4283387727],5],[1,-32,[0,"8fdZjEasxGFpytXfFP9tQr"]],[2,-33,[0,"c5EI3/9ltIEK3m8FKGecm8"],[5,159.28,50.4]]],[3,"64YHej+tBDgqcc53iEqka2",null,null,null,1,0]],[4,"gradient",3,[[5,"High Card",34,false,0,-34,[0,"e3k82gy4tF57laemt9kfUz"],6],[15,true,0.30000000000000004,-35,[0,"1cv9wSc09PLqrutSBhGBml"],[4,4294901502],[4,4288519581],[0,0.1,0.5],[0,0.8,0.5],[4,4284308829],7],[1,-36,[0,"3e4D7zDBFN3YaRrESiYyOl"]],[2,-37,[0,"b8I2ONB7ZMx4f8cvuu8e8F"],[5,159.28,50.4]]],[3,"d7A19XwJdOLZAkwYv/6RpC",null,null,null,1,0]],[4,"outline",4,[[8,"High Card",false,0,-38,[0,"f8sCaiK+VE3LgBGCRE9Q1d"],8],[9,-39,[0,"ccbiAnwI5GHoZHxllGjRFm"],[4,4278480072],9],[1,-40,[0,"ccKtI35zRKjY5OQrz6UiCe"]],[2,-41,[0,"34gvp/o/tA5pAjkIUXbO2/"],[5,187.38,50.4]]],[3,"b5JdAy7JhAJIUttXubX9Bp",null,null,null,1,0]],[4,"gradient",4,[[8,"High Card",false,0,-42,[0,"c4erMhIV1Jy6kw6gc2Pn0I"],10],[10,true,false,-43,[0,"3eIe2hE/ROoqoAK6eD1hqU"],[4,4294967295],[4,4285854460],11],[1,-44,[0,"58U+QE3MpCNIIiEHMmPml7"]],[2,-45,[0,"77Z7Ak9BVG5rY/hEktjyii"],[5,187.38,50.4]]],[3,"3e49qqW8BDdpwUXDEL8yGP",null,null,null,1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,-1,5,0,-2,6,0,0,3,0,0,3,0,0,3,0,-1,7,0,-2,8,0,0,4,0,0,4,0,0,4,0,-1,9,0,-2,10,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,10,0,4,1,45],[0,0,0,0,0,0,0,0,0,0,0,0],[1,2,1,2,1,2,1,2,1,2,1,2],[0,1,0,2,0,1,0,2,0,1,0,2]],[[[16,"../Shader/Outline/Outline",[{"USE_TEXTURE":[true]}],[{"hash":1461836436,"name":"../Shader/Outline/Outline|unlit-vs-outline:vert|unlit-fs-outline:frag","blocks":[{"name":"ConstantVS","stageFlags":1,"binding":0,"members":[{"name":"nodeSize","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":2,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineThickness","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_color","format":44,"location":1,"defines":[]},{"name":"a_uv0","format":21,"location":2,"defines":[]},{"name":"a_texCoord","format":21,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ConstantVS","stageFlags":1,"binding":0,"members":[{"name":"nodeSize","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"Constant","stageFlags":16,"binding":2,"members":[{"name":"outlineColor","type":16,"count":1},{"name":"outlineThickness","type":13,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\n  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_probeInfo;\n    mediump vec4 cc_debug_view_mode;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  #if USE_LOCAL\n      layout(std140) uniform CCLocal {\n        highp mat4 cc_matWorld;\n        highp mat4 cc_matWorldIT;\n        highp vec4 cc_lightingMapUVParam;\n        highp vec4 cc_localShadowBias;\n        highp vec4 cc_reflectionProbeData1;\n        highp vec4 cc_reflectionProbeData2;\n        highp vec4 cc_reflectionProbeBlendData1;\n        highp vec4 cc_reflectionProbeBlendData2;\n      };\n  #endif\n  #if SAMPLE_FROM_RT\n      #define QUATER_PI         0.78539816340\n      #define HALF_PI           1.57079632679\n      #define PI                3.14159265359\n      #define PI2               6.28318530718\n      #define PI4               12.5663706144\n      #define INV_QUATER_PI     1.27323954474\n      #define INV_HALF_PI       0.63661977237\n      #define INV_PI            0.31830988618\n      #define INV_PI2           0.15915494309\n      #define INV_PI4           0.07957747155\n      #define EPSILON           1e-6\n      #define EPSILON_LOWP      1e-4\n      #define LOG2              1.442695\n      #define EXP_VALUE         2.71828183\n      #define FP_MAX            65504.0\n      #define FP_SCALE          0.0009765625\n      #define FP_SCALE_INV      1024.0\n      #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n                  #define LIGHT_MAP_TYPE_DISABLED 0\n      #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n      #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n      #define REFLECTION_PROBE_TYPE_NONE 0\n      #define REFLECTION_PROBE_TYPE_CUBE 1\n      #define REFLECTION_PROBE_TYPE_PLANAR 2\n      #define REFLECTION_PROBE_TYPE_BLEND 3\n      #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n                  #define LIGHT_TYPE_DIRECTIONAL 0.0\n      #define LIGHT_TYPE_SPHERE 1.0\n      #define LIGHT_TYPE_SPOT 2.0\n      #define LIGHT_TYPE_POINT 3.0\n      #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n      #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n      #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n      #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n      #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n      #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n      #define TONE_MAPPING_ACES 0\n      #define TONE_MAPPING_LINEAR 1\n      #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n      #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n        #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n      #endif\n      #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n      #endif\n  #endif\n  in vec3 a_position;\n  in vec4 a_color;\n  in vec2 a_uv0;\n  in vec2 a_texCoord;\n  out vec2 v_uv0;\n  out vec2 v_unitSize;\n  out vec4 v_color;\n  layout(std140) uniform ConstantVS {\n      vec2 nodeSize;\n  };\n  vec4 vert () {\n      vec4 pos = vec4(a_position, 1);\n      #if USE_LOCAL\n          pos = cc_matWorld * pos;\n      #endif\n      #if CC_USE_MODEL\n          pos = cc_matViewProj * cc_matWorld * pos;\n      #endif\n      #if USE_PIXEL_ALIGNMENT\n          pos = cc_matView * pos;\n          pos.xyz = floor(pos.xyz);\n          pos = cc_matProj * pos;\n      #else\n          pos = cc_matViewProj * pos;\n      #endif\n      v_uv0 = a_texCoord;\n      v_unitSize = 1.0 / nodeSize;\n      #if SAMPLE_FROM_RT\n          v_uv0 = cc_cameraPos.w > 1.0 ? vec2(v_uv0.x, 1.0 - v_uv0.y) : v_uv0;\n      #endif\n          v_color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n    precision highp float;\n    #if USE_ALPHA_TEST\n      layout(std140) uniform ALPHA_TEST_DATA {\n        float alphaThreshold;\n      };\n    #endif\n    void ALPHA_TEST (in vec4 color) {\n      #if USE_ALPHA_TEST\n        if (color.a < alphaThreshold) discard;\n      #endif\n    }\n    void ALPHA_TEST (in float alpha) {\n      #if USE_ALPHA_TEST\n        if (alpha < alphaThreshold) discard;\n      #endif\n    }\n    layout(std140) uniform CCGlobal {\n      highp   vec4 cc_time;\n      mediump vec4 cc_screenSize;\n      mediump vec4 cc_nativeSize;\n      mediump vec4 cc_probeInfo;\n      mediump vec4 cc_debug_view_mode;\n    };\n    layout(std140) uniform CCCamera {\n      highp   mat4 cc_matView;\n      highp   mat4 cc_matViewInv;\n      highp   mat4 cc_matProj;\n      highp   mat4 cc_matProjInv;\n      highp   mat4 cc_matViewProj;\n      highp   mat4 cc_matViewProjInv;\n      highp   vec4 cc_cameraPos;\n      mediump vec4 cc_surfaceTransform;\n      mediump vec4 cc_screenScale;\n      mediump vec4 cc_exposure;\n      mediump vec4 cc_mainLitDir;\n      mediump vec4 cc_mainLitColor;\n      mediump vec4 cc_ambientSky;\n      mediump vec4 cc_ambientGround;\n      mediump vec4 cc_fogColor;\n      mediump vec4 cc_fogBase;\n      mediump vec4 cc_fogAdd;\n      mediump vec4 cc_nearFar;\n      mediump vec4 cc_viewPort;\n    };\n    #define QUATER_PI         0.78539816340\n    #define HALF_PI           1.57079632679\n    #define PI                3.14159265359\n    #define PI2               6.28318530718\n    #define PI4               12.5663706144\n    #define INV_QUATER_PI     1.27323954474\n    #define INV_HALF_PI       0.63661977237\n    #define INV_PI            0.31830988618\n    #define INV_PI2           0.15915494309\n    #define INV_PI4           0.07957747155\n    #define EPSILON           1e-6\n    #define EPSILON_LOWP      1e-4\n    #define LOG2              1.442695\n    #define EXP_VALUE         2.71828183\n    #define FP_MAX            65504.0\n    #define FP_SCALE          0.0009765625\n    #define FP_SCALE_INV      1024.0\n    #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n            #define LIGHT_MAP_TYPE_DISABLED 0\n    #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n    #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n    #define REFLECTION_PROBE_TYPE_NONE 0\n    #define REFLECTION_PROBE_TYPE_CUBE 1\n    #define REFLECTION_PROBE_TYPE_PLANAR 2\n    #define REFLECTION_PROBE_TYPE_BLEND 3\n    #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n            #define LIGHT_TYPE_DIRECTIONAL 0.0\n    #define LIGHT_TYPE_SPHERE 1.0\n    #define LIGHT_TYPE_SPOT 2.0\n    #define LIGHT_TYPE_POINT 3.0\n    #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n    #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n    #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n    #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n    #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n    #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n    #define TONE_MAPPING_ACES 0\n    #define TONE_MAPPING_LINEAR 1\n    #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n    #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n      #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n    #endif\n    #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n    #endif\n    in vec4 v_color;\n    in vec2 v_unitSize;\n    #if USE_TEXTURE\n        in vec2 v_uv0;\n        uniform sampler2D cc_spriteTexture;\n    #endif\n    layout(std140) uniform Constant {\n        vec4 outlineColor;\n        float outlineThickness;\n    };\n    vec4 frag () {\n        vec4 o = texture(cc_spriteTexture, v_uv0);\n        o *= v_color;\n        if (o.a <= 0.99) {\n            vec4 outlineColor2 = outlineColor;\n            float outlineAlpha = 0.0;\n            float step = (360.0 / float(20)) * PI / 180.0;\n            for (int i = 0; i < 20; i++) {\n                float rads = float(i) * step;\n                vec2 samplePos = v_uv0 + outlineThickness * vec2(cos(rads) * v_unitSize.x, sin(rads) * v_unitSize.y);\n                outlineAlpha = max(outlineAlpha, texture(cc_spriteTexture, samplePos).a);\n            }\n            if (outlineAlpha >= 0.004) {\n                outlineColor2.a = outlineAlpha;\n                float currentAlpha = o.a;\n                o.a = 1.0;\n                o = mix(outlineColor2, o, currentAlpha);\n            }\n            else {\n                o.a = 0.0;\n            }\n        }\n        ALPHA_TEST(o);\n    return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":57,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":45}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_MODEL","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"}]}],[{"passes":[{"name":"outline","program":"../Shader/Outline/Outline|unlit-vs-outline:vert|unlit-fs-outline:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"nodeSize":{"type":14,"value":[1,1]},"outlineThickness":{"type":13,"value":[3]},"outlineColor":{"type":16,"value":[1,1,1,1]}}}]}]]],0,0,[],[],[]]]]
